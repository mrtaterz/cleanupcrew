//assault class's weapons

//it still portrays you as incompotent and it is less bouncy
//oh, and  it's dangerous.
actor usGrenade : Grenade replaces Grenade
{
	//bounceCount 2
	radius 2
	height 4
	+canbouncewater
	+usebouncestate
	+extremedeath
	+hittracer
	+bounceautooffflooronly
	bounceType "hexen"
	damageType "explosive"
	states
	{
		
		bounce:
			SGRN A 0 A_JumpIf(args[0] > 0,"null") //failsafe to keep projectile from lingering indefinitely
			SGRN A 0 A_SetArg(1,args[1]*0.8+random(-40,40))
			xloop:
			//hit yourself for splash damage only
			SGRN A 1 A_JumpIfCloser(20,"die")
			SGRN A 0 A_SetAngle(angle + args[1])
			loop
	//	bounce.ceiling:
	//		SGRN A 1 A_SetAngle(angle + args[1])
	//		SGRN A 0 A_JumpIf(velz >= 0,"bounce")
	//		SGRN A 0 A_ChangeFlag("doomBounce",true)
	//		goto bounce
		die:
			SGRN A 0 A_Scream
			SGRN A 0 A_ChangeFlag("missile",false)
			SGRN A 0 A_Stop
		death:
			SGRN A 0 A_SetArg(0,1)
			SGRN A 0 A_SpawnItemEx("ExploQuakeMaker")
			goto super::death
	}
}
//thump thump tube
actor usGrenadeLauncher : DoomWeapon
{
	Weapon.ammoType "usRocketAmmo"
	Weapon.ammoGive 2
	Weapon.ammoUse 1
	Inventory.icon "GLPPA0"
	tag "$TAG_GRENADEGUN"
	states
	{
		select:
			GLAG A 0 A_Raise
			GLAG A 1 A_Raise
			loop
		deselect:
			GLAG A 0 A_Lower
			GLAG A 1 A_Lower
			loop
		ready:
			GLAG A 1 A_WeaponReady
			loop
		fire:
			GLAG A 2
			GLAF A 1
			GLAG B 0 A_FireCustomMissile("GrenadierSteam",0,0)
			GLAG B 2 A_FireSTGrenade
			GLAF B 2
			GLAF A 3 //RECOIL ANIMATION'S FINAL FRAME
			//14 FRAMES TO FILL TO OPENSHOTGUN2
			//GLAG D 7 A_CheckReload
			//GLAG C 7
			GLAX A 2 A_CheckReload
			GLAX BCD 2
			GLAX EF 3
			//GLAG E 7 A_OpenShotgun2
			//7 FRAMES TO FILL TO OPENING
			GLAX G 2 A_OpenShotgun2
			GLAX HI 1
			GLAX J 2
			//7 FRAMES TO FILL TO LOADING
			//GLAG F 7
			GLAX K 2 A_FireCustomMissile("40MilCaseSpawner",0,0,0,(height==56) ? 2 : 0)
			GLAX L 2
			GLAX M 3
			//13 FRAMES TO FILL TO CLOSING
			//YOU FUCKED UP AND FILLED 14 INSTEAD WHOOPS!
			GLAX N 2 A_LoadShotgun2
			GLAX OPQRS 2
			GLAX T 1 //TEST: CORRECT FUNCTION TIME LENGTH
			//GLAG G 7 A_LoadShotgun2
			//GLAG E 6
			//6 FRAMES TO FILL TO REFIRE
			GLAX U 2 A_CloseShotgun2
			GLAX VW 2
			//5 FRAMES AFTER LATE REFIRE
			GLAX X 2 A_Refire
			GLAX Y 2
			GLAX Z 1
			//GLAG H 6 A_CloseShotgun2
			//GLAG A 5 A_Refire
			goto ready
	}
}

actor 40MilCase : CaseBase
{
	scale 0.5
	bounceSound "weapons/grenadecase"
	bounceFactor 0.4
	states
	{
		spawn:
			CAS1 B 0 NoDelay ACS_NamedExecuteWithResult("attachcasingsteamer")
			CAS1 B 3 A_Jump(256,"xloop","yloop","zloop")
		xloop:
			CAS1 BAHGFEDC 5
			loop
		yloop:
			CAS1 BAHGFEDC 4
			loop
		zloop:
			CAS1 BAHGFEDC 3
			loop
		death:
			CAS1 C 1 A_Jump(256,1,2,3,4,5,6)
			CAS1 I 1
			goto bedead
			CAS1 J 1
			goto bedead
			CAS1 K 1
			goto bedead
			CAS1 L 1
			goto bedead
			CAS1 M 1
			goto bedead
			CAS1 N 1
			goto bedead
	}
}

actor 40MilCaseSpawner : CaseSpawnerBase
{
	speed 8
	states
	{
		spawn:
			TNT1 A 0 NoDelay A_Stop
			TNT1 A 0 ACS_NamedExecuteWithResult("inherittargvel")
			TNT1 AAA 0 A_SpawnItemEx("CaseSteam",0,0,0,0.25*cos(angle+110) + velx*1.1 + frandom(-0.5,0.5),0.25*sin(angle+110) + vely*1.1 + frandom(-0.5,0.5),velz,0,SXF_ABSOLUTEVELOCITY)
			TNT1 A 1 A_SpawnItemEx("40MilCase",0,0,0,2*cos(angle+110) + velx*1.1 + frandom(-0.5,0.5),2*sin(angle+110) + vely*1.1 + frandom(-0.5,0.5),frandom(2,3) + velz,0,SXF_ABSOLUTEVELOCITY)
			stop
	}
}



//Hydraulic Gauntlet--
//An experimental melee weapon capable of delivering a pound of steel wherever
//you want it, fast. Or rather, slow, as the hydraulic motors need time to build
//pressure. The need to deliver an unreasonably large amount of blunt force
//in close range soon proved to be just a novelty for punching barrels across
//test chambers, and the project was on the verge of cancellation when an
//incident saw the need for a tool that could push a threat away from the user
//quickly and effectively.

//unused, as it turns out it was just a novelty for punching barrels across
//test chambers
/*
actor AssaultFist : Fist
{
	Tag "$TAG_HYDROFIST"
	Obituary "$OB_ASSAULTED"
	Inventory.Icon "IMPPA0"
	Weapon.Kickback 300
	+GIVEFISTINGMEDAL
	states
	{
	Ready:
		IMPA A 1 A_WeaponReady
		Loop
	Deselect:
		IMPA A 1 A_Lower
		Loop
	Select:
		IMPA A 1 A_Raise
		Loop
	Fire:
		IMPA B 1 A_PlaySound("weapons/hydrofist/charge",1)
		IMPA B 1 offset(2,32) //why? as always the answer is "netcode"
		IMPA B 1 offset(-2,32)
		IMPA B 1 offset(2,32)
		IMPA B 1 offset(-2,32)
		IMPA B 1 offset(2,32)
		IMPA B 1 offset(-2,32)
		IMPA B 1 offset(3,32)
		IMPA B 1 offset(-3,32)
		IMPA B 1 offset(3,32)
		IMPA B 1 offset(-3,32)
		IMPA B 1 offset(3,32)
		IMPA B 1 offset(-3,32)
		IMPA B 1 offset(4,32)
		IMPA B 1 offset(-4,32)
		IMPA B 1 offset(4,32)
		IMPA B 1 offset(-4,32)
		IMPA B 1 offset(4,32)
		IMPA B 1 offset(-4,32)
		IMPA B 1 offset(4,32)
		IMPA B 1 offset(-4,32)
		IMPA B 7 offset(1,32)
		IMPA C 1 
		IMPA D 10 A_CustomPunch(30*random(1,4),true,0,"HydrofistPuff")
		IMPA E 5
		IMPA C 4
		IMPA B 5
		Goto Ready
	}
}

actor HydrofistPuff : BulletPuff
{
	obituary "$OB_ASSAULTED"
	+puffOnActors
	ActiveSound "weapons/hydrofist/miss"
	AttackSound "weapons/hydrofist/miss"
	SeeSound "weapons/hydrofist/hit"
	states
	{
		crash:
			goto super::spawn //HACKING
		spawn: 
			goto Melee
	}
}
*/

actor MachineGun : DoomWeapon //light machine gun
{
	Decal "BulletChip"
	Weapon.ammoType "usClip"
	Weapon.ammoUse 1
	Tag "$TAG_MG"
	Obituary "$OB_MG"
	Inventory.icon "MGPPA0"
	States
	{
		Select:
			MCGN A 0 A_Raise
			MCGN A 1 A_Raise
			Loop
		Deselect:
			MCGN A 0 A_Lower
			MCGN A 1 A_Lower
			MCGN A 0 A_ZoomFactor(1)
			MCGN A 0 A_Light0 //lmao
			Loop
		Ready:
			MCGN A 0 A_JumpIf(args[0]!=1,"inspect")
			xloop:
			MCGN AAA 1 A_WeaponReady
			MCGN A 0 A_ZoomFactor(1)
			MCGN A 0 A_Light0 //lmao
			Loop
		inspect:
			MCGN A 0 A_SetArg(0,1)
			MCGN A 5 Offset(-2,34) A_SetTics(random(4,10))
			MCGN A 4 Offset(-3,38) A_PlaySound("weapons/machinegun/ready",CHAN_WEAPON)
			MCGN A 3 Offset(-3,44)
			MCGN A 5 Offset(-4,46)
			MCGN A 10 Offset(-3,45)
			goto Ready
		Fire:
			MCGN A 1 A_Jump(128,"fire2")
			MCGN A 0 A_ZoomFactor(1.00025,ZOOM_NOSCALETURNING)
			MCGN A 0 A_PlaySound("weapons/machinegun",CHAN_WEAPON)
			MCGN A 0 A_PlaySound("weapons/machinegundist",CHAN_5)//A_FireCustomMissile("DistantMachineGunMaker",0,0)
			MCGN A 0 A_FireCustomMissile("7MilCaseSpawner",0,0)
			MCGN A 0 A_Light(2)
			MGF2 A 1 Bright A_FireBullets((height==56) ? 5.6 : 5.0,0,-1,5)
			MGF2 B 1 Bright A_Light(5)
			goto offsetify
		fire2:
			MCGN A 1
			MCGN A 0 A_ZoomFactor(1.00025,ZOOM_NOSCALETURNING)
			MCGN A 0 A_PlaySound("weapons/machinegun",CHAN_WEAPON)
			MCGN A 0 A_PlaySound("weapons/machinegundist",CHAN_5)
			MCGN A 0 A_FireCustomMissile("7MilCaseSpawner",0,0)
			MCGN A 0 A_Light(2)
			MGF1 A 1 Bright A_FireBullets((height==56) ? 5.6 : 5.0,0,-1,5)
			MGF1 B 1 Bright A_Light(5)
		offsetify:
			MCGN A 0 A_Light0
			//now pick a random offset
			TNT1 A 0 A_Jump((height == 56) ? 0 : 256,3,4)
			TNT1 A 0 A_Jump(256,2,2,2,3,3,3,4,5)
			MCGN A 5 Offset(0,33) //this will be fell through to due to netcode but never chosen by the jump
			goto refire
			TNT1 A 0 Offset(-1,32)
			goto refire
			TNT1 A 0 Offset(1,32)
			goto refire
			TNT1 A 0 Offset(-2,32)
			goto refire
			TNT1 A 0 Offset(2,32)
		refire:
			MCGN A 0 A_ZoomFactor(1)
			MCGN A 3 A_Refire
			goto Ready
			
	}
}

actor 7MilCase : CaseBase
{
	scale 0.25
	bouncesound "weapons/machinegun/casebounce"
	states
	{
		spawn:
			CAS7 B 0 NoDelay ACS_NamedExecuteWithResult("attachcasingsteamer")
			CAS7 B 3 A_Jump(256,"xloop","yloop","zloop")
		xloop:
			CAS7 BCDEFGHA 3
			loop
		yloop:
			CAS7 BCDEFGHA 2
			loop
		zloop:
			CAS7 BCDEFGHA 1
			loop
		death:
			CAS7 C 1 A_Jump(256,"d1","d2")
		d1:
			CAS7 C 1
			goto bedead
		d2:
			CAS7 G 1
			goto bedead
	}
}

actor 7MilCaseSpawner : CaseSpawnerBase
{
	speed 8
	states
	{
		spawn:
			TNT1 A 0 NoDelay A_Stop
			TNT1 A 0 ACS_NamedExecuteWithResult("inherittargvel")
			TNT1 A 1 A_SpawnItemEx("7MilCase",0,0,0,2*cos(angle-100) + velx *1.1 + frandom(-1,1),2*sin(angle-100) + vely*1.1 + frandom(-1,1),frandom(3,5) + velz,0,SXF_ABSOLUTEVELOCITY)
			stop
	}
}

actor AssaultFist : usFist
{
	Inventory.icon "FISPA0"
	states
	{
		select:
			BPNG A 0 A_Raise
			BPNG A 1 A_Raise
			loop
		deselect:
			BPNG A 0 A_Lower
			BPNG A 1 A_Lower
			loop
		ready:
			BPNG A 1 A_WeaponReady
			loop
		Fire:
			BPNG B 4
			BPNG C 4 A_CustomPunch(4*random(1,10),1,0,"usPunchPuff")
			BPNG D 5
			BPNG C 4
			BPNG B 5 A_ReFire
			Goto Ready
		AltFire:
			KICK A 4 A_GiveInventory("PowerKicking",1)
			KICK B 5
			KICK C 5 A_CustomPunch(6*random(1,10),1,0,"KickPuff",86)
			KICK B 4
			KICK A 4
			KICK A 0 A_Refire
			Goto Ready
	}
}

actor PowerNVG : PowerLightAmp //TODO: make clientside
{
	Powerup.Duration 0x7FFFFFFF
	Powerup.Color "GreenMap"
}

actor LaserBeem //lazor
{
	+NOINTERACTION
	+NOGRAVITY
	+PUFFONACTORS
	+BLOODLESSIMPACT
	+DONTSPLASH
	//+CLIENTSIDEONLY
	+NONETID
	RenderStyle "Add"
	Alpha 0.5
	Mass 5
	states
	{
		spawn:
			LAZR A 1 Bright NoDelay
			stop
	}

}


