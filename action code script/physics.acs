enum : fixed
{
    HOLD_DIST = 64.0,
    PICK_DIST = 64.0,
    HOLD_ZOFS = 16.0
};

int cl_svHeldTID;

Script "__TraceGetActor_Helper" (int oldTID, int newTID)
{
    Delay(1);

    Thing_ChangeTID(newTID, oldTID);
}

int TraceGetActor(int tid, fixed angle, fixed pitch, fixed dist, bool keep = false)
{
    int result;
    int oldActorTID = PickActor(0, angle, pitch, dist, 0, MF_SHOOTABLE, ML_BLOCKING|ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN, PICKAF_RETURNTID);
    int newActorTID = UniqueTID();

    if(PickActor(0, angle, pitch, dist, newActorTID, MF_SHOOTABLE, ML_BLOCKING|ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN, PICKAF_FORCETID))
    {
        result = newActorTID;

        if(!keep)
            ACS_NamedExecuteWithResult("__TraceGetActor_Helper", oldActorTID, newActorTID);
    }

    return result;
}

Script "us_physicspickup_settarget" (int tid, int plrTID)
{
    if(SetActivator(tid))
        SetPointer(AAPTR_TARGET, plrTID);
}

Script "us_call_as_tid" (int tid, raw scriptName, int arg1, int arg2)
{
    if(SetActivator(tid))
        ACS_NamedExecuteWithResult(scriptName, arg1, arg2);
}

Script "us_attemptresync" (int tid)
{
    for(int i = 0; i < 8; i++)
    {
        GiveActorInventory(tid, "us_PosResyncHack", 1);
        Delay(2);
    }
}

Script "us_physicspickuploop" ENTER
{
    enum : fixed
    {
        THROW_VEL = 20.0,
        THROW_THRESH = 18.0,
        MAX_DROP_VEL = 22.0,
        MAX_DROP_VEL_HU = 10.0,
        MAX_THROW_MASS = 1000.0
    };

    int heldTID;
    int dropBtns;
    fixed heldLastX, heldLastY, heldLastZ;
    fixed throwVelX, throwVelY, throwVelZ;
    fixed throwVelLen, maxThrowVel;
    fixed ang, pit;
    bool justGrabbed;
    str lastWeapon;

    void HolsterWeapon ()
    {
        lastWeapon = GetWeapon();
        TakeInventory(lastWeapon, 1);

        GiveInventory("us_NoWeapon", 1);
        SetWeapon("us_NoWeapon");
    }

    void UnholsterWeapon ()
    {
        TakeInventory("us_NoWeapon", 1);
        GiveInventory(lastWeapon, 1);
        SetWeapon(lastWeapon);
    }

    void UpdateHeldPos ()
    {
        heldLastX = GetActorX(heldTID);
        heldLastY = GetActorY(heldTID);
        heldLastZ = GetActorZ(heldTID);
    }

    void MakeMissile (fixed speed)
    {
        BCSUtils::SetActorGravity(heldTID, 1.0);

        if(StriCmp(GetActorClass(0), "unseen") == 0)
        {
            ACS_NamedExecuteWithResult("us_physicspickup_settarget", heldTID, ActivatorTID());
            BCSUtils::SetActorSpeed(heldTID, speed);
            BCSUtils::ChangeActorFlag(heldTID, "MISSILE", true);
        }
    }

    void DropObject()
    {
        if(heldTID)
        {
            throwVelX = GetActorX(heldTID) - heldLastX;
            throwVelY = GetActorY(heldTID) - heldLastY;
            throwVelZ = GetActorZ(heldTID) - heldLastZ;

            throwVelLen = BCSUtils::VectorLength3D(throwVelX, throwVelY, throwVelZ);

            if(throwVelLen > maxThrowVel)
            {
                throwVelLen = maxThrowVel;

                BCSUtils::Normalize3D(throwVelX, throwVelY, throwVelZ);
                throwVelX = (fixed)(BCSUtils::r1) * throwVelLen;
                throwVelY = (fixed)(BCSUtils::r2) * throwVelLen;
                throwVelZ = (fixed)(BCSUtils::r3) * throwVelLen;
            }

            if(throwVelLen >= THROW_THRESH)
                MakeMissile(throwVelLen);


            BCSUtils::SetActorGravity(heldTID, 1.0);
            SetActorVelocity(heldTID,   throwVelX,
                                        throwVelY,
                                        throwVelZ, false, false);
        }

        if(ClassifyActor(0) != ACTOR_WORLD)
        {
            TakeInventory("us_CarryingObject", 1);
            UnholsterWeapon();
        }

        if(IsNetworkGame())
            ACS_NamedExecuteWithResult("us_attemptresync", heldTID);

        heldTID = 0;
    }

    maxThrowVel = CheckInventory("Slasher") ? MAX_DROP_VEL : MAX_DROP_VEL_HU;

    while( (BCSUtils::GetActorHealth(0) > 0) || (ClassifyActor(0) == ACTOR_WORLD) )
    {
        if(!justGrabbed)
            Delay(1);

        ang = GetActorAngle(0);
        pit = GetActorPitch(0);

        if(!heldTID)
        {
            if(!BCSUtils::KeyPressed(BT_USE))
                continue;

            heldTID = TraceGetActor(0, ang, pit, PICK_DIST, true);
            if(heldTID)
            {
                if(!CheckFlag(heldTID, "PUSHABLE"))
                {
                    heldTID = 0;
                    continue;
                }

                BCSUtils::SetActorGravity(heldTID, 0.0);
                GiveInventory("us_CarryingObject", 1);
                UpdateHeldPos();

                if(CheckCustomFlag(heldTID, "bHasGrabState"))
                    SetActorState(heldTID, "Grab");

                HolsterWeapon();

                if(IsNetworkGame())
                {
                    ACS_NamedExecuteWithResult("us_call_as_tid", heldTID, "us_hideobject_client", PlayerNumber(), 0);
                    NamedSendNetworkString("us_physicspickuploop_client", GetActorClass(heldTID), PlayerNumber());
                }

                justGrabbed = true;
                continue;
            }
        }
        else
        {
            int tmpTID;
            dropBtns = 0;

            if(!justGrabbed)
                dropBtns = (BCSUtils::GetActorMass(heldTID) > MAX_THROW_MASS) ? BT_ATTACK|BT_USE : BT_USE;
            else
                justGrabbed = false;

            Warp(heldTID, Cos(pit) * HOLD_DIST, 0.0, HOLD_ZOFS - (Sin(pit) * HOLD_DIST), 0.0, WARPF_MOVEPTR);

            tmpTID = PickActor(0, ang, pit, PICK_DIST, 0, MF_SHOOTABLE, ML_BLOCKING|ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN, PICKAF_RETURNTID);

            if(tmpTID != heldTID)
            {
                SetActorPosition(heldTID, heldLastX, heldLastY, heldLastZ, false);
                DropObject();
                continue;
            }

            if( (!heldTID) || (ClassifyActor(heldTID) == ACTOR_NONE) || (BCSUtils::GetActorHealth(heldTID) <= 0) || (BCSUtils::KeyPressedAny(dropBtns)) || (pit > 0.125) )
            {
                DropObject();
                continue;
            }
            else if(BCSUtils::KeyPressed(BT_ATTACK))
            {
                throwVelX = (Cos(pit) * THROW_VEL);
                SetActorVelocity(heldTID, Cos(ang) * throwVelX, Sin(ang) * throwVelX, -(Sin(pit) * THROW_VEL), false, false);
                MakeMissile(THROW_VEL);

                TakeInventory("us_CarryingObject", 1);

                UnholsterWeapon();
                heldTID = 0;

                continue;
            }

            UpdateHeldPos();
        }
    }

    DropObject();
}

Script "us_physicspickuploop_respawn" RESPAWN
{
    ACS_NamedExecuteWithResult("us_physicspickuploop");
}

Script "us_hideobject_client" (int pnum) CLIENTSIDE
{
    if(pnum != ConsolePlayerNumber())
        terminate;

    cl_svHeldTID = UniqueTID();
    Thing_ChangeTID(0, cl_svHeldTID);
    SetActorProperty(0, APROP_RenderStyle, STYLE_None);
}

Script "us_physicspickuploop_client" (raw actorNameIn) CLIENTSIDE
{
    enum : str
    {
        ERROR_MSG = "ERROR: us_physicspickuploop_client called with incorrect string"
    };

    if(!CheckInventory("us_CarryingObject"))
        terminate;

    str actorName = actorNameIn;

    int heldTID = UniqueTID();
    SpawnForced(actorName, GetActorX(0), GetActorY(0), GetActorZ(0), heldTID, 0);
    if(!ThingCount(T_NONE, heldTID))
    {
        Log(s:"Couldn't spawn clientside actor");
        terminate;
    }

    BCSUtils::ChangeActorFlag(heldTID, "NOINTERACTION", true);
    BCSUtils::SetActorGravity(heldTID, 0.0); // just in case

    fixed pit;

    while(CheckInventory("us_CarryingObject"))
    {
        pit = GetActorPitch(0);

        if(cl_svHeldTID)
            SetActorPositionForced(cl_svHeldTID, 32767.0, 32767.0, 32767.0, false);

        Warp(heldTID, Cos(pit) * HOLD_DIST, 0.0, HOLD_ZOFS - (Sin(pit) * HOLD_DIST), 0.0, WARPF_MOVEPTR);

        Delay(1);
    }

    SetActorProperty(cl_svHeldTID, APROP_RenderStyle, STYLE_Normal);
    Thing_ChangeTID(cl_svHeldTID, 0);
    cl_svHeldTID = 0;

    Thing_Remove(heldTID);
}
